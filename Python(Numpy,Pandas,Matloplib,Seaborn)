import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import scipy.stats as stats
import statsmodels.api as sm

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

import xgboost as xgb
import tensorflow as tf
from tensorflow import keras

from wordcloud import WordCloud

import warnings
warnings.filterwarnings("ignore")

file_path = "/content/app_rating_recommendations.csv"
df = pd.read_csv('/content/app_rating_recommendations.csv')

df.head()

df.info()
print("\nMissing Values:\n", df.isnull().sum())
df.describe()


plt.figure(figsize=(8, 5))
sns.countplot(x='rating', data=df, palette='viridis')
plt.title("Distribution of App Ratings")
plt.show()
if 'reviews' in df.columns:
    text = " ".join(df['reviews'].astype(str))
    wordcloud = WordCloud(width=800, height=400, background_color='black').generate(text)
    plt.figure(figsize=(10, 5))
    plt.imshow(wordcloud, interpolation="bilinear")
    plt.axis("off")
    plt.title("Most Common Words in Reviews")
    plt.show()


df['high_rating'] = np.where(df['rating'] >= 4.0, 1, 0)

features = ['reviews', 'rating']  
X = df[features]
y = df['high_rating']

X['reviews'] = pd.to_numeric(X['reviews'], errors='coerce') 

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.impute import SimpleImputer
imputer = SimpleImputer(strategy='mean')
X_train = imputer.fit_transform(X_train)
X_test = imputer.transform(X_test)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train_scaled, y_train)

y_pred = model.predict(X_test_scaled)
print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))
